[{"authors":["admin"],"categories":null,"content":"I am a first year PhD student in biostatistics at the Dalla Lana School of Public Health at the University of Toronto. My research interests include causal inference, Bayesian methods and their application to observational data. I am also broadly interested in developing inference-based statistical models for matrix-valued or imaging data.\nFollowing my remote first year of PhD studies, I am joining PyMC3 as a Google Summer of Code student! You can follow my progress in my blog here.\nPreviously, I have pursued a dual Master\u0026rsquo;s degree under an IVADO scholarship: one in Biostatistics at McGill University and one in Public Health Data Science at the University of Bordeaux. I was jointly supervised by Dr. Erica Moodie and Dr. Rodolphe Thiébaut.\nI also enjoy coding in Python, skateboarding and eating yogurt. Feel free to connect with me!\n","date":-62135596800,"expirydate":-62135596800,"kind":"term","lang":"en","lastmod":1621468711,"objectID":"2525497d367e79493fd32b198b28f040","permalink":"https://www.larrydong.com/authors/admin/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/authors/admin/","section":"authors","summary":"I am a first year PhD student in biostatistics at the Dalla Lana School of Public Health at the University of Toronto. My research interests include causal inference, Bayesian methods and their application to observational data.","tags":null,"title":"Larry Dong","type":"authors"},{"authors":[],"categories":[],"content":"1 - Probability Theory This section follows closely Chapters 1 - 3 from Probability with Martingales by David Williams. For a more in-depth read, Probability and Measures by Patrick Billingsley sounds great but challenging.\n1.1 - What is a measure? Formally, we start with $(S, \\Sigma)$ be a measurable space where $S$ is some topological space and $\\Sigma$ is the $\\sigma$-algebra generated by open subsets of $S$. A mapping $\\mu: \\Sigma \\rightarrow [0, +\\infty]$ on $(S, \\Sigma)$ is a measure if:\n (1) $\\mu(A) \\geq 0$ for all $A \\in \\Sigma$ and; (2) $\\mu$ is countably additive.  Transitioning from general, super abstract sets, $\\sigma$-algebras and crazy measures, we usually define a probability triple $(\\Omega, \\mathcal{F}, \\mathbb{P})$ as followed:\n $\\Omega$: sample space; $\\mathcal{F}$: set of possible events $E \\subseteq \\Omega$ (and is a $\\sigma$-algebra); $\\mathbb{P}$: probability measure, i.e. a measure $\\mu$ such that $\\mu(\\Omega) = 1$.  The reason we go through general measures, ($\\sigma$)-algebras and their properties is because they are applicable to $(\\Omega, \\mathcal{F}) \\stackrel{\\text{in words}}{=}$ (sample space, family of events), a measurable space, but just less crazy.\n1.2 - What is a random variable? In statistics, we are interested in random variables and their properties. Random variables assign values to possible events in $\\mathcal{F}$ on which probability functions can be evaluated. Given a measurable space $(S, \\Sigma)$, a class of functions $h: S \\rightarrow \\mathbb{R}$ is $\\Sigma$-measurable if, for all $A \\in \\mathcal{B}$, its inverse $h^{-1}: \\mathcal{B} \\rightarrow \\Sigma$ has the following property:\n\\begin{align*} h^{-1}(A) = {s \\in S \\vert h(s) \\in A } \\end{align*}\nwhere $\\mathcal{B} := \\sigma$(open sets of $\\mathbb{R}$) is the Borel set.\n1.3 - Summary of probability theory (already?) The overarching idea is that, for a probability triple $(\\Omega, \\mathcal{F}, \\mathbb{P})$, we have the following mappings outlined:\n\\begin{align*} \\Omega \u0026amp;\\stackrel{X}{\\rightarrow} \\mathbb{R}\\\\\\\n\\mathcal{B} \\stackrel{X^{-1}}{\\rightarrow} \u0026amp; \\mathcal{F} \\stackrel{\\mathbb{P}}{\\rightarrow} [0, 1] . \\end{align*}\n2 - Bayesian Inference 2.1 - Overview of the Bayesian Paradigm In the frequentist framework, statistical inference is performed by solely looking at the likelihood function, defined to be the probability of observing the observed data and denoted by $\\mathcal{L}(\\theta; \\pmb{x})$. We let $\\theta \\in \\Theta \\subseteq \\mathbb{R}^p$ to be the $p$-dimensional parameter of interest and $\\pmb{x} = (x_1, \\dots, x_n)$ to be observed values or realisations of the random vector $\\pmb{X} = (X_1, \\dots, X_n)$. Often in mathematical statistics courses, $X_1, \\dots, X_n \\sim F(\\cdot)$ are\n (1) independent and identically distributed and; (2) $F(x; \\theta)$ is a distribution parametrized by $\\theta$.  In the frequentist framework, statistical inference is performed by solely looking at the likelihood function, defined to be the probability of observing the observed data and denoted by $\\mathcal{L}(\\theta; \\pmb{x})$:\n\\begin{align*} \\mathcal{L}(\\theta; \\pmb{x}) = \\prod_{i=1}^n f(x_i; \\theta) \\end{align*}\nwhere $f(\\cdot; \\theta)$ is the probability density function for $X$. The maximum likelihood estimator $\\widehat{\\theta} = \\text{argmax}_{\\theta \\in \\Theta} \\mathcal{L}(\\theta; \\pmb{x})$ exhibits good asymptotic properties (or \u0026ldquo;mild\u0026rdquo;) conditions.\nIn the Bayesian paradigm for parametric models, we incorporate prior belief about $\\theta$ into the our inference-based procedure. In other words, we are interested in a posterior distribution $\\pi_n(\\theta; \\pmb{x})$ and we update our initial \u0026ndash; which can be close to no \u0026ndash; prior belief $\\pi(\\theta)$ with information from the observed data, i.e. the likelihood $\\mathcal{L}(\\theta; \\pmb{x})$:\n\\begin{align*} \\pi_n(\\theta; \\pmb{x}) \\stackrel{\\theta}{\\propto} \\mathcal{L}(\\theta; \\pmb{x}) \\pi(\\theta) . \\end{align*}\n2.2 What are Bayesian nonparametrics? From above, a slight discrepancy lies in the interpretation, estimation procedure and philosophy behind Bayesian and frequentist inference. However, to perform inference on $\\theta$, we must first posit parametric assumptions on our hypothesized data generating process. In many situations, we may still address research or scientific questions without positing parametric assumptions. By doing so, we cut out the middle man in our statistical inference procedure and go nonparametric 👻.\n2.3 Exchangeability 3 - Dirichlet Processes WHY IS THIS IMPORTANT That\u0026rsquo;s a great question, Charles-Auguste.\n","date":1621814400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1621814400,"objectID":"56d69d80e767139ce6fa9887a3c8ff3f","permalink":"https://www.larrydong.com/gsoc2021/community-bonding-week-2/","publishdate":"2021-05-24T00:00:00Z","relpermalink":"/gsoc2021/community-bonding-week-2/","section":"gsoc2021","summary":"Math turns out to be pretty difficult.","tags":[],"title":"📚 Diving into the math...","type":"gsoc2021"},{"authors":[],"categories":[],"content":"The first year of my PhD studies had, in all honesty, some rather unexpected challenges. Given the ongoing pandemic, my move to a new city for my PhD studies was put on hold. Instead, I decided to spend more quality time with one of my good friends (he\u0026rsquo;s a great cook!) and my parents. As spring was looming in, I quickly ran out of motivation to work on assignments and write my end-of-term report, but, with the help of my support network and all things considered, my first year ended well!\nWith summer right around the corner, I was eager for some good news and an opportunity to look forward to. On Monday, May 17 right before 2pm, I received the following email and nearly floored with happiness:\nand I had to immediately share this amazing news with my parents and my friends! I am extremely grateful for the Google Summer of Code (GSoC) opportunity for the many reasons. Firstly, I will learn more about open source development and probabilistic programming from well-established mentors. Secondly, this practical opportunity would complement well my summer studying for my PhD comprehensive exams. Last but not least, I\u0026rsquo;m being paid! 😅\nUnder the mentorship of Christopher Fonnesbeck and Austin Rochford, my GSoC project centers around extending the PyMC3 package with a Dirichlet process submodule. PyMC3 is a probabilistic framework in Python that allows users to fit Bayesian models via MCMC sampling. There is a growing interest in Bayesian nonparametric methods for fitting statistical models without specifying its parametric form. Dirichlet processes can be used as priors for probability distributions themselves. How exactly? I shall find out in the next three weeks of community bonding!\nIn the coming months, I look forward to getting to know the PyMC3 community, reading more about Bayesian nonparametric statistics and, above all, learning from my mentors. Stay tuned for more!\n","date":1621468800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1621468800,"objectID":"6e3f5f62360ef1edfbbaf47a614553da","permalink":"https://www.larrydong.com/gsoc2021/community-bonding-week-1/","publishdate":"2021-05-20T00:00:00Z","relpermalink":"/gsoc2021/community-bonding-week-1/","section":"gsoc2021","summary":"With my first year of PhD studies coming to an end, what better way to celebrate the beginning of a second summer during a pandemic than studying for my comprehensive exams participating in Google Summer of Code!","tags":[],"title":"🚀 End of a Remote First Year PhD, Beginning of GSoC2021","type":"gsoc2021"},{"authors":[],"categories":[],"content":"Here is a cheatsheet in using Anaconda with some of my personal preferences that I have retained. If you do follow this, please let me know if something is not working correctly!\nWhat is Anaconda? Simply put, Anaconda is an open-source package management system for Python. One of its most popular applications, Jupyter, is commonly used for data science related projects. In this article, I have tried to detail the steps from creating a virtual environment in Anaconda to using it in your Jupyter notebooks.\nInstalling Anaconda  Go to the Anaconda website here. Click on the appropriate distribution (Mac or Linux) and download the Anaconda installer for Python 3.7. Open Terminal and execute the following commands:  cd ~/Downloads chmod +x Anaconda3-2020.02-MacOSX-x86_64.sh ./Anaconda3-2020.02-MacOSX-x86_64.sh  If you\u0026rsquo;re on a Linux distribution, the downloaded file has a different name, so execute the commands above with the downloaded file name.\n❗ You should reset your Terminal window by simply restarting it.\nSetting up your virtual environment Creating a virtual environment for your Python project has many benefits, including version control for you and your collaborators and managing sets of installed packages for separate projects. Here are 5 steps to creating your Anaconda virtual environment and using it in a Jupyter notebook.\n1 - Creating the virtual environment conda create -n YOUR_ENV_NAME python=3.7  The command above specifies Python version in the environment to be 3.7, since this is the most stable and updated version at the moment. However, you can use a different version if you prefer.\n2 - Creating a Terminal Shortcut My preference is to create a Terminal shortcut to activate the environment.\necho \u0026quot;alias SHORTCUT_COMMAND='conda activate YOUR_ENV_NAME'\u0026quot; | cat - ~/.bash_profile \u0026gt; ~/.bash_profile source ~/.bash_profile  If you are on a Linux distribution, replace ~/.bash_profile by ~/.bashrc due to the difference in file names.\n3 - Activating your environment With the shortcut created using the commands above, you can now activate the environment by simply typing its name in Terminal!\nYOUR_ENV_NAME  4 - Installing packages Say you want to install some Python packages called package1, package2 and package3. You can use the code below to do so.\nconda install -n YOUR_ENV_NAME package1 package2 package3  5 - Adding the environment to Jupyter Often times, it would be desirable to be able to access the environment in a Jupyter notebook, which is often used for coding in Python (it\u0026rsquo;s definitely my favorite!). To add your newly created environment to Jupyter, run the following commands in Terminal.\nconda install -n YOUR_ENV_NAME ipykernel -c conda-forge python -m ipykernel install --user --name YOUR_ENV_NAME  Running into command not found: jupyter One of the packages that you may have to install is jupyter itself!\nconda install -n YOUR_ENV_NAME -c conda-forge jupyterlab  Ready to code! Your environment should be ready to use in your Jupyter notebooks!\n Other (hopefully) useful things Locating your virtual environment My preference is to go the folder in which your environment is installed and simply removing it. To find the directory in which your virtual environment is located, you can do:\nsource activate YOUR_ENV_NAME # to activate your environment which python  You should get an output under the following format: SOME_DIRECTORY/YOUR_ENV_NAME/bin/python. The directory in which your environment is located is simply SOME_DIRECTORY.\nExample When I run which python after activating my environment called ml, I obtain /Users/larry/anaconda3/envs/ml/bin/python. It follows that the directory where my conda environments are located is Users/larry/anaconda3/envs/.\nDeleting your environment Once you have located your environment (see above) and found the directory in which your environments are located and that we will call SOME_DIRECTORY. To delete your environment, run the following commands:\ncd SOME_DIRECTORY rm -rf YOUR_ENV_NAME  Removing your environment from Jupyter Although you have deleted your environment and it no longer exists, for some reason the option to select it as a kernel is still available in your Jupyter notebook, although selecting it won\u0026rsquo;t work. To remove the environment as an option in the Jupyter notebook, run the following.\njupyter kernelspec uninstall YOUR_ENV_NAME  ","date":1587841474,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1621468711,"objectID":"1c7ccf0e695f579f2603b85c990035cf","permalink":"https://www.larrydong.com/post/conda-cheatsheet/","publishdate":"2020-04-25T15:04:34-04:00","relpermalink":"/post/conda-cheatsheet/","section":"post","summary":"Here is a cheatsheet in using Anaconda with some of my personal preferences that I have retained. If you do follow this, please let me know if something is not working correctly!","tags":[],"title":"🐍 Conda Environments and Jupyter Notebooks","type":"post"}]